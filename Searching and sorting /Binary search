#include <iostream>
using namespace std;



int binarySearch(int arr[],int n,int target){
  int s =0;
  int e=n-1;
  int mid = (s+e)/2;
  while(s<=e){
    // found
    if(arr[mid]==target){
      return mid;
    }
    // not found
    else if(arr[mid]<target){
      // right me jao
      s= mid+1;
      
    }
    else if(arr[mid]>target){
     // left me jao
      e =mid-1;
    }
    // update mid // imp bar bar bhul jate hee
    mid = (s+e)/2;
  }

  //if target is not present 
    return -1;
}
  int findfirstOccurence(int arr[],int n,int target) {
    int s=0;
    int e=n-1;
    int mid= s+ (e-s)/2;
    int ans =-1;

    while(s<=e){
      if(arr[mid] == target){
        // ans ko store karo
         ans =mid;
        // left me jao
         e = mid-1; 
      }
      else if(target > arr[mid]){
         // right me jao
         s= mid+1;
        
      }
      else if(arr[mid]>target){
        // left me jaao
        e = mid -1;
        
      }
        // update mid galti  karte hee
        mid = (s+e)/2;
    }
    return ans+1;
  }

int findlastOccurence(int arr[],int n,int target) {
  int s=0;
  int e=n-1;
  int mid= (s+e)/2;
  int ans =-1;

  while(s<=e){
    if(arr[mid] == target){
      // ans ko store karo
       ans = mid;
      // right me jao
       s = mid+1; 
    }
    else if(target > arr[mid]){
       // right me jao
       s= mid+1;

    }
    else if(arr[mid]>target){
      // left me jaao
       e = mid-1;

    }
      // update mid galti  karte hee
      mid = (s+e)/2;
  }
  return ans;
}

int totalOccurence(int arr[],int n,int target){
  int firstOcc =  findfirstOccurence (arr,n,target);
  int lastOcc = findlastOccurence (arr,n,target);
  int total = lastOcc - firstOcc +1;
  return total;
}


int missingElement(int arr[],int n){
  int s=0;
  int e= n-1;
  int mid = (s+e)/2;
 int ans =-1;
  while(s<=e){
    int diff = arr[mid] -mid;
    
    if (diff ==1){
      // right me jao
      s = mid+1;
      
    }
    else  {
      // store answer
      // left me jao
      ans = mid;
      e =mid-1;
    }
    mid = (s+e)/2;
  }

  if(ans+1 ==0){
    return n+1;
  }
   return ans+1;
}

int main() {
  int arr[]={1,2,3,5,6,7,8,10,11};
 //int target =70;
  int n=9;

 //  int ansIndex = binarySearch (arr,n,target);

 //  if (ansIndex==-1){
 //    cout<< "Target is not present"<<endl;
 //  }else{
 //   cout<<"Target found at index : "<<ansIndex<<endl;
 // }


   // int ansIndex = findfirstOccurence (arr,n,target);

   //  if (ansIndex==-1){
   //    cout<< "Target is not present"<<endl;
   //  }
   //  else{
   //   cout<<"Target found at index : "<<ansIndex<<endl;
   // }


   // int ansIndex = findlastOccurence (arr,n,target);

   //  if (ansIndex==-1){
   //    cout<< "Target is not present"<<endl;
   //  }
   //  else{
   //   cout<<"Target found at index : "<<ansIndex<<endl;
   // }

  // int ansIndex =  totalOccurence(arr,n,target);
  
  //  cout<< "total occurance is: "<<ansIndex<<endl;

  cout<< "Find the missing element : "<<missingElement(arr,n)<<endl;
  return 0;
}
