// optimising seive and segmented seive


#include <iostream>
# include<vector>
using namespace std;
// return sieve
vector<bool>Sieve(int n){
  // create seive array of n size telling is prime
   vector<bool> seiveprime(n+1,true); // sabko pahile true mark kar dete hee
  seiveprime[0]=seiveprime[1] = false; // mark false

  for(int i=2;i<=n;i++){
    if(seiveprime[i]== true){
      // multiple nikalo
      int j= i*2;
       while(j<=n){
         seiveprime[j] = false;
          j+=i;
       }
    }
  }
    return seiveprime; 
}
int main(){
    vector<bool> seiveprime = Sieve(25);
     for(int i=0;i<=25;i++){
       if(seiveprime[i]){
             cout<<i<<" "<<"is prime"<<endl;
       }
     }




  
}
